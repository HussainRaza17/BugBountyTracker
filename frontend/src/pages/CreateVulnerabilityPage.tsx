import { useState } from 'react'
import { useForm } from 'react-hook-form'
import { zodResolver } from '@hookform/resolvers/zod'
import { z } from 'zod'
import { useNavigate } from 'react-router-dom'
import { useMutation } from '@tanstack/react-query'
import { api } from '../lib/api'
import { LoadingSpinner } from '../components/ui/LoadingSpinner'
import { FileUpload } from '../components/FileUpload'
import toast from 'react-hot-toast'

const createVulnerabilitySchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().min(1, 'Description is required'),
  asset: z.string().min(1, 'Affected asset is required'),
  stepsToReproduce: z.string().min(1, 'Steps to reproduce is required'),
  cvssScore: z.number().min(0).max(10, 'CVSS score must be between 0 and 10'),
})

type CreateVulnerabilityForm = z.infer<typeof createVulnerabilitySchema>

export const CreateVulnerabilityPage: React.FC = () => {
  const navigate = useNavigate()
  const [files, setFiles] = useState<File[]>([])

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm<CreateVulnerabilityForm>({
    resolver: zodResolver(createVulnerabilitySchema),
    defaultValues: {
      cvssScore: 0,
    },
  })

  const createMutation = useMutation({
    mutationFn: async (data: CreateVulnerabilityForm) => {
      const formData = new FormData()
      
      // Add form fields
      Object.entries(data).forEach(([key, value]) => {
        formData.append(key, value.toString())
      })
      
      // Add files
      files.forEach((file) => {
        formData.append('files', file)
      })

      const response = await api.post('/vulnerabilities', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      })
      return response.data
    },
    onSuccess: (data) => {
      toast.success('Vulnerability report created successfully!')
      navigate(`/vulnerabilities/${data.vulnerability.id}`)
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || 'Failed to create vulnerability report')
    },
  })

  const onSubmit = (data: CreateVulnerabilityForm) => {
    createMutation.mutate(data)
  }

  const cvssScore = watch('cvssScore')

  return (
    <div className="max-w-3xl mx-auto space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-gray-900">Create Vulnerability Report</h1>
        <p className="mt-1 text-sm text-gray-500">
          Submit a new security vulnerability for review and tracking.
        </p>
      </div>

      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
        {/* Basic Information */}
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-medium text-gray-900">Basic Information</h3>
          </div>
          <div className="card-content space-y-4">
            <div>
              <label htmlFor="title" className="block text-sm font-medium text-gray-700">
                Title *
              </label>
              <input
                {...register('title')}
                type="text"
                className="mt-1 input"
                placeholder="Brief description of the vulnerability"
              />
              {errors.title && (
                <p className="mt-1 text-sm text-red-600">{errors.title.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="asset" className="block text-sm font-medium text-gray-700">
                Affected Asset *
              </label>
              <input
                {...register('asset')}
                type="text"
                className="mt-1 input"
                placeholder="e.g., https://example.com, mobile app, API endpoint"
              />
              {errors.asset && (
                <p className="mt-1 text-sm text-red-600">{errors.asset.message}</p>
              )}
            </div>

            <div>
              <label htmlFor="cvssScore" className="block text-sm font-medium text-gray-700">
                CVSS Score *
              </label>
              <div className="mt-1">
                <input
                  {...register('cvssScore', { valueAsNumber: true })}
                  type="number"
                  min="0"
                  max="10"
                  step="0.1"
                  className="input w-32"
                  placeholder="0.0"
                />
                <div className="mt-2">
                  <div className="flex items-center space-x-4 text-sm">
                    <span className={cvssScore >= 9 ? 'font-medium text-red-600' : 'text-gray-500'}>
                      Critical (9.0-10.0)
                    </span>
                    <span className={cvssScore >= 7 && cvssScore < 9 ? 'font-medium text-orange-600' : 'text-gray-500'}>
                      High (7.0-8.9)
                    </span>
                    <span className={cvssScore >= 4 && cvssScore < 7 ? 'font-medium text-yellow-600' : 'text-gray-500'}>
                      Medium (4.0-6.9)
                    </span>
                    <span className={cvssScore < 4 ? 'font-medium text-green-600' : 'text-gray-500'}>
                      Low (0.0-3.9)
                    </span>
                  </div>
                </div>
              </div>
              {errors.cvssScore && (
                <p className="mt-1 text-sm text-red-600">{errors.cvssScore.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Description */}
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-medium text-gray-900">Description</h3>
          </div>
          <div className="card-content">
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                Vulnerability Description *
              </label>
              <textarea
                {...register('description')}
                rows={6}
                className="mt-1 input"
                placeholder="Provide a detailed description of the vulnerability, including its impact and potential risks..."
              />
              {errors.description && (
                <p className="mt-1 text-sm text-red-600">{errors.description.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* Steps to Reproduce */}
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-medium text-gray-900">Steps to Reproduce</h3>
          </div>
          <div className="card-content">
            <div>
              <label htmlFor="stepsToReproduce" className="block text-sm font-medium text-gray-700">
                Reproduction Steps *
              </label>
              <textarea
                {...register('stepsToReproduce')}
                rows={6}
                className="mt-1 input"
                placeholder="1. Navigate to...&#10;2. Click on...&#10;3. Enter...&#10;4. Observe..."
              />
              {errors.stepsToReproduce && (
                <p className="mt-1 text-sm text-red-600">{errors.stepsToReproduce.message}</p>
              )}
            </div>
          </div>
        </div>

        {/* File Upload */}
        <div className="card">
          <div className="card-header">
            <h3 className="text-lg font-medium text-gray-900">Attachments</h3>
            <p className="text-sm text-gray-500">
              Upload screenshots, proof-of-concept files, or other supporting documents
            </p>
          </div>
          <div className="card-content">
            <FileUpload files={files} setFiles={setFiles} />
          </div>
        </div>

        {/* Submit */}
        <div className="flex justify-end space-x-3">
          <button
            type="button"
            onClick={() => navigate('/vulnerabilities')}
            className="btn btn-secondary btn-md"
          >
            Cancel
          </button>
          <button
            type="submit"
            disabled={createMutation.isPending}
            className="btn btn-primary btn-md"
          >
            {createMutation.isPending ? (
              <LoadingSpinner size="sm" />
            ) : (
              'Create Report'
            )}
          </button>
        </div>
      </form>
    </div>
  )
}
