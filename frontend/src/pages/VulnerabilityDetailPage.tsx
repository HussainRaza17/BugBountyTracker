import { useParams } from 'react-router-dom'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { api } from '../lib/api'
import { LoadingSpinner } from '../components/ui/LoadingSpinner'
import { useAuth } from '../hooks/useAuth'
import { formatDate, getSeverityColor, getSeverityLabel, getStatusColor, getStatusLabel } from '../lib/utils'
import { 
  BugAntIcon, 
  UserIcon, 
  CalendarIcon, 
  DocumentTextIcon,
  ChatBubbleLeftIcon,
  PaperClipIcon,
  PencilIcon
} from '@heroicons/react/24/outline'
import toast from 'react-hot-toast'

export const VulnerabilityDetailPage: React.FC = () => {
  const { id } = useParams<{ id: string }>()
  const { user } = useAuth()
  const queryClient = useQueryClient()

  const { data: vulnerability, isLoading } = useQuery({
    queryKey: ['vulnerability', id],
    queryFn: async () => {
      const response = await api.get(`/vulnerabilities/${id}`)
      return response.data.vulnerability
    },
    enabled: !!id,
  })

  const updateStatusMutation = useMutation({
    mutationFn: async (status: string) => {
      const response = await api.put(`/vulnerabilities/${id}`, { status })
      return response.data
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['vulnerability', id] })
      queryClient.invalidateQueries({ queryKey: ['vulnerabilities'] })
      toast.success('Status updated successfully')
    },
    onError: (error: any) => {
      toast.error(error.response?.data?.message || 'Failed to update status')
    },
  })

  const handleStatusUpdate = (status: string) => {
    updateStatusMutation.mutate(status)
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <LoadingSpinner size="lg" />
      </div>
    )
  }

  if (!vulnerability) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-500">Vulnerability not found</p>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="md:flex md:items-start md:justify-between">
        <div className="min-w-0 flex-1">
          <h1 className="text-2xl font-bold text-gray-900 sm:text-3xl">
            {vulnerability.title}
          </h1>
          <div className="mt-2 flex items-center space-x-4 text-sm text-gray-500">
            <span className="flex items-center">
              <UserIcon className="h-4 w-4 mr-1" />
              {vulnerability.reporter.name}
            </span>
            <span className="flex items-center">
              <CalendarIcon className="h-4 w-4 mr-1" />
              {formatDate(vulnerability.createdAt)}
            </span>
          </div>
        </div>
        <div className="mt-4 flex items-center space-x-3 md:mt-0">
          <span className={`badge ${getStatusColor(vulnerability.status)}`}>
            {getStatusLabel(vulnerability.status)}
          </span>
          <span className={`text-sm font-medium ${getSeverityColor(vulnerability.cvssScore)}`}>
            {getSeverityLabel(vulnerability.cvssScore)} ({vulnerability.cvssScore})
          </span>
        </div>
      </div>

      {/* Status Update (Admin only) */}
      {user?.role === 'ADMIN' && (
        <div className="card">
          <div className="card-content">
            <h3 className="text-sm font-medium text-gray-900 mb-3">Update Status</h3>
            <div className="flex space-x-2">
              {['REPORTED', 'VERIFIED', 'FIXED'].map((status) => (
                <button
                  key={status}
                  onClick={() => handleStatusUpdate(status)}
                  disabled={updateStatusMutation.isPending || vulnerability.status === status}
                  className={`px-3 py-1 text-sm rounded-md border ${
                    vulnerability.status === status
                      ? 'bg-primary-100 text-primary-700 border-primary-300'
                      : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                  } disabled:opacity-50 disabled:cursor-not-allowed`}
                >
                  {getStatusLabel(status)}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
        {/* Main Content */}
        <div className="lg:col-span-2 space-y-6">
          {/* Description */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Description</h3>
            </div>
            <div className="card-content">
              <div className="prose max-w-none">
                <p className="text-gray-700 whitespace-pre-wrap">{vulnerability.description}</p>
              </div>
            </div>
          </div>

          {/* Steps to Reproduce */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Steps to Reproduce</h3>
            </div>
            <div className="card-content">
              <div className="prose max-w-none">
                <p className="text-gray-700 whitespace-pre-wrap">{vulnerability.stepsToReproduce}</p>
              </div>
            </div>
          </div>

          {/* Attachments */}
          {vulnerability.attachments && vulnerability.attachments.length > 0 && (
            <div className="card">
              <div className="card-header">
                <h3 className="text-lg font-medium text-gray-900">Attachments</h3>
              </div>
              <div className="card-content">
                <div className="space-y-2">
                  {vulnerability.attachments.map((attachment: any) => (
                    <div key={attachment.id} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-md">
                      <PaperClipIcon className="h-5 w-5 text-gray-400" />
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium text-gray-900 truncate">
                          {attachment.fileName}
                        </p>
                        <p className="text-sm text-gray-500">
                          {(attachment.fileSize / 1024).toFixed(1)} KB
                        </p>
                      </div>
                      <a
                        href={attachment.fileUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-primary-600 hover:text-primary-500 text-sm font-medium"
                      >
                        View
                      </a>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}

          {/* Comments */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Comments</h3>
            </div>
            <div className="card-content">
              {vulnerability.comments && vulnerability.comments.length > 0 ? (
                <div className="space-y-4">
                  {vulnerability.comments.map((comment: any) => (
                    <div key={comment.id} className="border-b border-gray-200 pb-4 last:border-b-0">
                      <div className="flex items-start space-x-3">
                        <div className="flex-shrink-0">
                          <div className="h-8 w-8 rounded-full bg-primary-600 flex items-center justify-center">
                            <span className="text-sm font-medium text-white">
                              {comment.user.name.charAt(0).toUpperCase()}
                            </span>
                          </div>
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center space-x-2">
                            <p className="text-sm font-medium text-gray-900">
                              {comment.user.name}
                            </p>
                            <span className="text-xs text-gray-500">
                              {formatDate(comment.createdAt)}
                            </span>
                          </div>
                          <p className="mt-1 text-sm text-gray-700 whitespace-pre-wrap">
                            {comment.content}
                          </p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center py-6">
                  <ChatBubbleLeftIcon className="mx-auto h-12 w-12 text-gray-400" />
                  <h3 className="mt-2 text-sm font-medium text-gray-900">No comments</h3>
                  <p className="mt-1 text-sm text-gray-500">
                    Be the first to comment on this vulnerability.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* Details */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Details</h3>
            </div>
            <div className="card-content space-y-4">
              <div>
                <dt className="text-sm font-medium text-gray-500">CVSS Score</dt>
                <dd className={`mt-1 text-sm font-medium ${getSeverityColor(vulnerability.cvssScore)}`}>
                  {vulnerability.cvssScore} - {getSeverityLabel(vulnerability.cvssScore)}
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">Affected Asset</dt>
                <dd className="mt-1 text-sm text-gray-900 break-all">{vulnerability.asset}</dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">Status</dt>
                <dd className="mt-1">
                  <span className={`badge ${getStatusColor(vulnerability.status)}`}>
                    {getStatusLabel(vulnerability.status)}
                  </span>
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">Reported</dt>
                <dd className="mt-1 text-sm text-gray-900">
                  {formatDate(vulnerability.createdAt)}
                </dd>
              </div>
              <div>
                <dt className="text-sm font-medium text-gray-500">Last Updated</dt>
                <dd className="mt-1 text-sm text-gray-900">
                  {formatDate(vulnerability.updatedAt)}
                </dd>
              </div>
            </div>
          </div>

          {/* Reporter Info */}
          <div className="card">
            <div className="card-header">
              <h3 className="text-lg font-medium text-gray-900">Reporter</h3>
            </div>
            <div className="card-content">
              <div className="flex items-center space-x-3">
                <div className="flex-shrink-0">
                  <div className="h-10 w-10 rounded-full bg-primary-600 flex items-center justify-center">
                    <span className="text-sm font-medium text-white">
                      {vulnerability.reporter.name.charAt(0).toUpperCase()}
                    </span>
                  </div>
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900">
                    {vulnerability.reporter.name}
                  </p>
                  <p className="text-sm text-gray-500">
                    {vulnerability.reporter.email}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
